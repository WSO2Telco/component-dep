<%
var login = function (username, password,tenantMode) {
    var result, rolexml, isSuperTenant, message,
            log = new Log();

try{
    if(tenantMode != 'null' && tenantMode != '' && tenantMode != null){
     var userDomain=username.split("@")[1];
     if(tenantMode!=userDomain){
     return {
             error:true,
            cookie:null,
            message:"Authentication failed. Not a valid tenant domain"
        };
    }
    }

    var xhr = new XMLHttpRequest();
    var store = jagg.module("manager").getAPIStoreObj();
    manager = jagg.module("manager");
    var endpoint =  manager.getAuthServerURL()+"AuthenticationAdmin";
    log.info("Admin Service url :"+endpoint);
    xhr.open("POST", endpoint);
    var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:aut="http://authentication.services.core.carbon.wso2.org"><soap:Header/><soap:Body><aut:login><aut:username>' +  username + '</aut:username><aut:password>' + password + '</aut:password><aut:remoteAddress>localhost</aut:remoteAddress></aut:login></soap:Body></soap:Envelope>';
    xhr.send(payload);
    var cookie = (xhr.getAllResponseHeaders());

   var result=xhr.responseText.toString();
   var start=result.indexOf("ns:return");
   var end=result.indexOf("</ns:return");
   var isLogged=result.substring(start,end).split(">")[1];
	var userValidationResult = validateUser(username,password);
	var isAllowed = userValidationResult.isAllowed;

   if(isAllowed){
       if (isLogged=='false') {
            if (log.isDebugEnabled()) {
                log.debug("Error while authenticating user : " + username);
            }

            message="Login failed.Please recheck the username and password and try again"

            return {
                error:true,
                cookie:null,
                message:message
            };
        }else{

    isSuperTenant =tenantMode;
    var sessionCookie = cookie.split(';')[0];
	var isAdmin = userValidationResult.isAdmin;
	var operator = userValidationResult.operator;

	if(isAdmin != true && !(operator != null)){
	if (log.isDebugEnabled()) {log.debug("Error while authenticating user : " + username);}
	message="Permission denied."
	return {error:true,cookie:null,message:message};}

    var roleresult = getRoles(username,password);
    var isCustomerCare = parseRoleCustomerCare(roleresult);

    jagg.setUser({username:username, isSuperTenant:isSuperTenant, cookie:sessionCookie,operator:operator, isAdmin:isAdmin, isCustomerCare:isCustomerCare});

    return {
        error:false,
        cookie:sessionCookie
    };
    }
}else{
     return {
            error:true,
            cookie:null,
            message:username+" Login Failed."
        };

}}
catch (e) {
        log.error(e.message);
 return {
        error:true,
        message:e.message.split("Exception:")[2]
    };
}
};
var loginWithSAMLToken = function (token) {
    var site = require("/site/conf/site.json");
    var security =require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);

    var result,
            log = new Log(),
            manager = jagg.module("manager"),
            store = manager.getAPIStoreObj();


    var encodedToken = ssoRelyingParty.xmlEncode(token);
    var xhr = new XMLHttpRequest();
    var endPoint = manager.getHTTPsURL() + "/services/SAML2SSOAuthenticationService";
    xhr.open("POST", endPoint);

    var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>'+encodedToken+'</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';

    xhr.send(payload);
    var cookieString = xhr.getResponseHeader("Set-Cookie");

    var userName = ssoRelyingParty.getSAMLResponseNameId(token);

    return {
        error:false,
        username:userName,
        cookie:cookieString
    };
};

var logout = function () {
    //TODO : implement logout
     session.put("createPermitted", null);
     session.put("publishPermitted", null);
    return {
        error:false
    };
};

var isUserAllowed=function(username,password){
	var log=new Log();
	try{

		var result = getRoles(username, password);
		return parseRolesResponse(result);
	}catch (e) {
		log.error(e.message);
		return false;

	}
};

var validateUser=function(username,password){
	var log=new Log();
	try{

		var result = getRoles(username, password);

		var isAllowed = parseRolesResponse(result);
		log.debug("isAllowed : " + isAllowed);

		var isAdmin = isAdminUser(result, username);
		log.debug("isAdmin : " + isAdmin);

		var operator = parseRolesOperator(result);
		log.debug("operator : " + operator);

		var customerCare = parseRoleCustomerCare(result);
		log.debug("customerCare : " + customerCare);

		return {
			isAllowed:isAllowed,
			isAdmin:isAdmin,
			operator:operator
		};
	}catch (e) {
		log.error(e.message);
		return {
			error:true
		};

	}
};

var getRoles=function(username,password){
    var log=new Log();
    try{

    var version = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getRoleListOfUser";
    var store = jagg.module("manager").getAPIStoreObj();
    var isEmailLoginEnabled=store.isEnableEmailUsername();
    var checkedUserName=username;
    if(!isEmailLoginEnabled && (username.indexOf("@") != -1)){
    checkedUserName=username.split("@")[0];
    }
    var manager = jagg.module("manager");
    var endpoint =  manager.getAuthServerURL()+"RemoteUserStoreManagerService/";

    var payload = '<ser:getRoleListOfUser xmlns:ser="http://service.ws.um.carbon.wso2.org">'+
                  '<ser:userName>'+checkedUserName+'</ser:userName></ser:getRoleListOfUser>';

    var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
    var adminUsername = APIUtil.replaceSystemProperty("${admin.username}");
    var adminPassword = APIUtil.replaceSystemProperty("${admin.password}");
    version.open(options,endpoint, false,String(adminUsername),String(adminPassword));

    version.send(payload);
    var result = version.responseE4X;

    return result;
    }catch (e) {
            log.error(e.message);
            return false;

    }
};


var parseRolesResponse=function parseResponse(result){
var site = require("/site/conf/site.json");
var roles= result. *::["return"];

var log=new Log();

for(var i=0; i<roles.length(); i++){
 var entry=roles[i];
 var roleName= entry.text();
 var allowedRoles = site.allowedRoles.split(",");

 for(var j=0; j < allowedRoles.length; j++ ){
 	if(roleName.indexOf(allowedRoles[j]) > -1) {
       return true;
     }
 }
}
return false;
};

var parseRolesOperator=function parseOperator(rolexml){
var site = require("/site/conf/site.json");
var log=new Log();

var roles= rolexml. *::["return"];


for(var i=0; i<roles.length(); i++){
 var entry=roles[i];
 var roleName= entry.text();

 var operatorRoles = site.operators;

 for(key in operatorRoles) {
         rolelist = operatorRoles[key].split(",");
         for(var j=0; j < rolelist.length; j++ ){
         	if(roleName.indexOf(rolelist[j]) > -1) {
              return key;
           }
          }
}
}
return null;
};

var parseRoleCustomerCare = function parseCustomerCare(rolexml){
	var site = require("/site/conf/site.json");
	var log=new Log();

	var roles= rolexml. *::["return"];

	for(var i=0; i<roles.length(); i++){
		var entry=roles[i];
	 	var roleName= entry.text();

	 	//var operatorRoles = site.operators;
	 	var ccRoles = site.customerCare;

	 	for(key in ccRoles) {
	    	rolelist = ccRoles[key].split(",");
	    	for(var j=0; j < rolelist.length; j++ ){
	        	if(roleName.indexOf(rolelist[j]) > -1) {
	            	return key;
	        	}
	    	}
		}
	}
	return null;
};


var isAdminUser=function isAdmin(result, username){

	var site = require("/site/conf/site.json");
	var roles= result. *::["return"];

	for(var i=0; i<roles.length(); i++){
		var entry=roles[i];
		var roleName= entry.text();
		var adminRole = site.adminRole;

		if (adminRole == roleName) {
			return true;
		}
	}
	return false;
};

var getOperator = function getOperator(username, password){

	var roleResult = getRoles(username, password);
	var operator = parseRolesOperator(roleResult);

	return operator;
};

var loginToBPSWithSAMLToken = function (token) {
	var site = require("/site/conf/site.json");

	var result,
	log = new Log(),
	manager = jagg.module("manager"),
	store = manager.getAPIStoreObj();

	var xhr = new XMLHttpRequest();
	var endPoint = site.workflows.applicationWorkFlowServerURL + "SAML2SSOAuthenticationService/";
	xhr.open("POST", endPoint);

	var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>'+token+'</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';
	xhr.send(payload);

	var cookie = xhr.getResponseHeader("Set-Cookie");
	session.put("workflowCookie", cookie);
};

//This function is used to retrieve logged in user's roles
function getUserRoles(username, password){
    var carbon = require('carbon'),
    process = require('process'),
	srv = new carbon.server.Server({url: manager.getHTTPsURL()}),
	tenantId = carbon.server.tenantId(),
	userManager = new carbon.user.UserManager(srv, tenantId),
	user = new carbon.user.User(userManager, username),
	roles = user.getRoles();
	return roles;
}

%>

