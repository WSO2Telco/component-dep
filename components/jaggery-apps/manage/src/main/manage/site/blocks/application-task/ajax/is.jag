<% include("/jagg/jagg.jag");
var ws = require("ws");
var log = new Log();
(function() {
    var action = request.getParameter("action");
    var appName = request.getParameter("appName");
    var appDescription = request.getParameter("appDesc");
    var cookievalue = request.getHeader("applicationCookie");

    if (action == "createSpAppIs") {
        var oauthData = getOAuthConsumerKeyOfApp(appName, cookievalue);
        var oauthConsumerKey = oauthData.oauthConsumerKey;
        var oauthConsumerSecret = oauthData.oauthConsumerSecret;
        createApplication(appName, appDescription, cookievalue);
        var appData = getApplicationID(appName, cookievalue);
        var appID = appData.applicationID;
        updateApplication(appID, appName, appDescription, oauthConsumerKey, oauthConsumerSecret, cookievalue);
    }
    if (action == "removeSpAppIs") {
        removeApplication(appName, cookievalue);
    }
}());

function createApplication(appName, description, cookievalue) {
    var version = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.mep = 'in-only';
    options.action = "urn:createApplication";
    options["HTTPHeaders"] = [{
        name: "Cookie",
        value: cookievalue
    }, ];
    var payload = '<xsd:createApplication xmlns:xsd=\"http://org.apache.axis2/xsd\">' + '<xsd:serviceProvider xmlns:xsd=\"http://org.apache.axis2/xsd\">' + '<xsd1:applicationName xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">' + appName + '</xsd1:applicationName>' + '<xsd1:description xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\"></xsd1:description>' + '</xsd:serviceProvider>' + '</xsd:createApplication>';
    var result;
    var site = require("/site/conf/site.json");
    var identityServerUrl = site.IS_URL;
    var endpoint = site.IS_URL + "services/IdentityApplicationManagementService/";
    try {
        version.open(options, endpoint, false);
        version.send(payload);
        result = version.responseE4X;
    } catch (e) {
        log.error(e.toString());
        session.put("showLogin", "true");
        return null;
    }
};

function updateApplication(appId, appName, description, oauthConsumerKey, oauthConsumerSecret, cookievalue) {
    var version = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.mep = 'in-only';
    options.action = "urn:updateApplication";
    options["HTTPHeaders"] = [{
        name: "Cookie",
        value: cookievalue
    }, ];
    var payload = '<xsd:updateApplication xmlns:xsd=\"http://org.apache.axis2/xsd\">' + '<xsd:serviceProvider xmlns:xsd=\"http://org.apache.axis2/xsd\">' + '<xsd1:applicationId xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">' + appId + '</xsd1:applicationId>' + '<xsd1:applicationName xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">' + appName + '</xsd1:applicationName>' + '<xsd1:description xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\"></xsd1:description>' + '<xsd1:inboundAuthenticationConfig xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">' + '<xsd1:inboundAuthenticationRequestConfigs xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">' + '<xsd1:inboundAuthKey xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">' + oauthConsumerKey + '</xsd1:inboundAuthKey>' + '<xsd1:inboundAuthType xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">oauth2</xsd1:inboundAuthType>' + '<xsd1:properties xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">' + '<xsd1:confidential xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">false</xsd1:confidential>' + '<xsd1:name xmlns:x1001=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">oauthConsumerSecret</xsd1:name>' + '<xsd1:required xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">false</xsd1:required>' + '<xsd1:value xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">' + oauthConsumerSecret + '</xsd1:value>' + '</xsd1:properties>' + '</xsd1:inboundAuthenticationRequestConfigs>' + '</xsd1:inboundAuthenticationConfig>' + '<xsd1:outboundProvisioningConfig xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\"></xsd1:outboundProvisioningConfig>' + '<xsd1:permissionAndRoleConfig xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\" />' + '<xsd1:saasApp xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">false</xsd1:saasApp>' + '</xsd:serviceProvider>' + '</xsd:updateApplication>';
    var result;
    var site = require("/site/conf/site.json");
    var identityServerUrl = site.IS_URL;
    var endpoint = site.IS_URL + "services/IdentityApplicationManagementService/";
    try {
        version.open(options, endpoint, false);
        version.send(payload);
        result = version.responseE4X;
    } catch (e) {
        log.error(e.toString());
        session.put("showLogin", "true");
        return null;
    }    
}

function removeApplication(appName, cookievalue) {
    var version = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.mep = 'in-only';
    options.action = "urn:deleteApplication";
    options["HTTPHeaders"] = [{
        name: "Cookie",
        value: cookievalue
    }, ];
    var payload = '<xsd:deleteApplication xmlns:xsd=\"http://org.apache.axis2/xsd\">' + '<xsd1:applicationName xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\">' + appName + '</xsd1:applicationName>' + '</xsd:deleteApplication>';
    var result;
    var site = require("/site/conf/site.json");
    var identityServerUrl = site.IS_URL;
    var endpoint = site.IS_URL + "services/IdentityApplicationManagementService/";
    try {
        version.open(options, endpoint, false);
        version.send(payload);
        result = version.responseE4X;
    } catch (e) {
        log.error(e.toString());
        session.put("showLogin", "true");
        return null;
    }
}

function getApplicationID(appName, cookievalue) {
    var version = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.action = "urn:getApplication";
    options["HTTPHeaders"] = [{
        name: "Cookie",
        value: cookievalue
    }, ];
    var payload = '<xsd:getApplication xmlns:xsd=\"http://org.apache.axis2/xsd\">' + '<xsd:applicationName xmlns:xsd=\"http://org.apache.axis2/xsd\">' + appName + '</xsd:applicationName>' + '</xsd:getApplication>';
    var site = require("/site/conf/site.json");
    var identityServerUrl = site.IS_URL;
    var endpoint = site.IS_URL + "services/IdentityApplicationManagementService/";
    try {
        version.open(options, endpoint, false);
        version.send(payload);
        result = version.responseE4X;
        var wsUtil = require('wsUtil.jag');
        var json = wsUtil.E4XtoJSON(result);
        return json.
        return;
    } catch (e) {
        log.error(e.toString());
        session.put("showLogin", "true");
        return null;
    }
    // 	return json.return.oauthConsumerKey;
    return json.
    return;
}

function getOAuthConsumerKeyOfApp(appName, cookievalue) {
    var version = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.action = "urn:getOAuthApplicationDataByAppName";
    options["HTTPHeaders"] = [{
        name: "Cookie",
        value: cookievalue
    }, ];
    var payload = '<xsd:getOAuthApplicationDataByAppName xmlns:xsd=\"http://org.apache.axis2/xsd\">' + '<xsd:appName xmlns:xsd=\"http://org.apache.axis2/xsd\">' + appName + '</xsd:appName>' + '</xsd:getOAuthApplicationDataByAppName>';
    var site = require("/site/conf/site.json");
    var identityServerUrl = site.IS_URL;
    var endpoint = site.IS_URL + "services/OAuthAdminService/";
    try {
        version.open(options, endpoint, false);
        version.send(payload);
        result = version.responseE4X;
        var wsUtil = require('wsUtil.jag');
        var json = wsUtil.E4XtoJSON(result);
        return json.
        return;
    } catch (e) {
        log.error(e.toString());
        session.put("showLogin", "true");
        return null;
    }
} %>