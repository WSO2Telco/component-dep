<%
var ws = require("ws");
var log=new Log();

var getTasks = function (filterCategory,taskType) {
	
	var version = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/simpleQuery";
	var cookie=session.get("workflowCookie");
	
	var site = require("/site/conf/site.json");
	options["HTTPHeaders"] = [
	{name : "Cookie", value :cookie },
		];

		var searchBy='';
		if(filterCategory==null||filterCategory=='ALL'){
			searchBy='ALL_TASKS';
		} else if(filterCategory=='userOnly'){
			searchBy='ASSIGNED_TO_ME';
		}else if(filterCategory=='claimable'){
			searchBy='CLAIMABLE';
		}

		var prefixEndpoint;
		if(taskType=="ApproveSubscription"){
			prefixEndpoint= site.workflows.subscriptionWorkFlowServerURL;
		} else if(taskType=="ApproveUser"){
			prefixEndpoint=site.workflows.signupWorkFlowServerURL;
		} else if(taskType=="ApproveApplication"){
			prefixEndpoint=site.workflows.applicationWorkFlowServerURL;
		} else if(taskType=="ApplicationRegistration"){
			prefixEndpoint=site.workflows.appRegistrationWorkFlowServerURL;
		}

		var payload = '<ns:simpleQuery xmlns:ns="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803" xmlns:ns1="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/types/200803">'+
		'<ns:simpleQueryInput><ns1:pageSize>'+100000+'</ns1:pageSize><ns1:pageNumber>'+0+'</ns1:pageNumber><ns1:simpleQueryCategory>'+'ALL_TASKS'+'</ns1:simpleQueryCategory></ns:simpleQueryInput></ns:simpleQuery>';
		var result;
		var endpoint=prefixEndpoint+"HumanTaskClientAPIAdmin/";
		
		
		
		try {
			version.open(options,endpoint, false);
			
			version.send(payload);
			
			
			result = version.responseE4X;
			
			return parseResponse(result,taskType,endpoint);

		} catch (e) {
			
			log.error(e.toString());
			
			session.put("showLogin", "true");
			return null;
		}
};

var parseResponse=function parseResponse(response,taskType,endpoint){
	var tasks=response.*::taskSimpleQueryResultSet.*::row
	var tasksObject=[];

	for(var i=0; i<tasks.length(); i++){
		var task={
		};
		var entry=tasks[i];

		var taskName= entry.*::name.text();
		var status = entry.*::status.text();
		var id = entry.*::id.text();

		if(taskName.indexOf(taskType)>=0 && status!='COMPLETED'){
			var taskOwnedByLoggedUser= isTaskOwnedByLoggedUser(endpoint,id);
			if(((status!='IN_PROGRESS')&& (status!='RESERVED'))||((status=='IN_PROGRESS')&& taskOwnedByLoggedUser)||((status=='RESERVED')&& taskOwnedByLoggedUser)) {
				var presentationSubject = entry.*::presentationSubject.text();
				var createdTime = entry.*::createdTime.text();
				createdTime=createdTime.substring(0,10) +'  -  ' +createdTime.substring(11,29);

				task.id=id;
				task.status=status;
				task.presentationSubject=presentationSubject;
				task.createdTime=createdTime;
				tasksObject.push(task);
			}
		}
	}

	return tasksObject;

};

var isTaskOwnedByLoggedUser=function(endpoint,taskId){
	var username=session.get("logged.user").username;
	var version = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/loadTask";
	var cookie=session.get("workflowCookie");

	if (cookie==null) {
		print({
			error:true,
			message:msg.error.loginRequired(action)
		});
		return;
	}else{
		options["HTTPHeaders"] = [
		{
			name : "Cookie", value :cookie },
			];

			var payload = '<ns:loadTask xmlns:ns="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803" xmlns:ns1="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/types/200803">'+
			'<ns:identifier>'+parseInt(taskId)+'</ns:identifier></ns:loadTask>';
			var response;


			try {

				version.open(options,endpoint, false);
				version.send(payload);
				response = version.responseE4X;
				var actualOwner=response.*::taskAbstract.*::actualOwner;
				var store = jagg.module("manager").getAPIStoreObj();
				var isEmailLoginEnabled=store.isEnableEmailUsername();
				if(!isEmailLoginEnabled && (username.indexOf("@") != -1)){
					username=username.split("@")[0];
				}
				if(username==actualOwner){

					return true;
				}
				else{
					return false;
				}

			} catch (e) {
				log.error(e.toString());
				session.put("showLogin", "true");
				return false;
			}
	}
};

// Returns the list of tiers related to the specified subscription.
var getSubscriptionTiers = function (taskId) {
	var version = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getInput";
	var cookie=session.get("workflowCookie");
	options["HTTPHeaders"] = [
	{
		name : "Cookie", value :cookie },
		];

		var site = require("/site/conf/site.json");
		var prefixEndpoint = site.workflows.subscriptionWorkFlowServerURL;

		var payload = '<ns:getInput xmlns:ns="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803">' +
		'<ns:identifier>' + taskId + '</ns:identifier>' +
		'</ns:getInput>';
		var result;
		var endpoint=prefixEndpoint+"HumanTaskClientAPIAdmin/";

		try {

			version.open(options,endpoint, false);
			version.send(payload);
			result = version.responseE4X;

			return parseTaskInputResponse(result,endpoint);

		} catch (e) {
			log.error(e.toString());
			session.put("showLogin", "true");
			return null;
		}
};

// Parse the response received from the 'getInput' admin service (HumanTaskClientAPIAdmin) invocation.
var parseTaskInputResponse = function parseTaskInputResponse(response,endpoint) {

	var tiersObject=[];
	var tiers;

	var SubscriptionApprovalData = new XML((response.*::taskData).toString());
	var tiers = SubscriptionApprovalData.*::tiers.*::tier;

	for(var i = 0; i < tiers.length(); i++) {
		var tier = {
		};
		var entry = tiers[i];

		var tierName = entry.*::tierName.text();
		var tierDisplayName = entry.*::tierDisplayName.text();

		tier.name = tierName;
		tier.displayName = tierDisplayName;
		tiersObject.push(tier);
	}
	return tiersObject;

};

// Returns the task details
function getTaskDetails(taskId) {
	var version = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getInput";
	var cookie=session.get("workflowCookie");
	options["HTTPHeaders"] = [
	{
		name : "Cookie", value :cookie },
		];

		var site = require("/site/conf/site.json");
		var prefixEndpoint = site.workflows.subscriptionWorkFlowServerURL;

		var payload = '<ns:getInput xmlns:ns="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803">' +
		'<ns:identifier>' + taskId + '</ns:identifier>' +
		'</ns:getInput>';
		var result;
		var endpoint=prefixEndpoint+"HumanTaskClientAPIAdmin/";

		try {

			version.open(options,endpoint, false);
			version.send(payload);
			result = version.responseE4X;
		//	log.info("Task Details: " + stringify(result));

			return result;

		} catch (e) {
			log.error(e.toString());
			session.put("showLogin", "true");
			return null;
		}
};

function getApplicationDetails(taskId){
	var applicationDetails;
	try {
		var site = require("/site/conf/site.json");
		var prefixEndpoint = site.workflows.subscriptionWorkFlowServerURL;
		var endpoint=prefixEndpoint+"HumanTaskClientAPIAdmin/";

		applicationDetails = getTaskDetails(taskId);
		 	//	log.info("Application Details: " + stringify(applicationDetails));
		 	//	log.info("============================================================================================================");
		return parseApplicationDetailsResponse(applicationDetails, endpoint, taskId);
	} catch (e) {
		log.error(e.toString());
		session.put("showLogin", "true");
		return null;
	}
};

function parseApplicationDetailsResponse(response, endpoint, taskId){
	var applicationDetails = new Object();
	var tiersObject=[];
	var tiers;
	var task_id = taskId;
	applicationDetails.taskId = task_id;
	var AppApprovalData = new XML((response.*::taskData).toString());

	var applicationName = AppApprovalData.*::applicationName.text();
	var applicationDescription = AppApprovalData.*::applicationDescription.text();
	var userName = AppApprovalData.*::userName.text();
	applicationDetails.applicationName = applicationName;
	applicationDetails.applicationDescription = applicationDescription;
	applicationDetails.userName = userName;

	var tiers = AppApprovalData.*::tiers.*::tier;

	for(var i = 0; i < tiers.length(); i++) {
		var tier = {
		};
		var entry = tiers[i];
		var tierName = entry.*::tierName.text();
		var tierDisplayName = entry.*::tierDisplayName.text();
		var tierAttributes = entry.*::tierAttributes;
		var tierAttribute = tierAttributes.*::tierAttribute;

		var tier_attributes = [];
		for (j = 0; j < tierAttribute.length(); j++) {
			var tier_attribute = {
			};
			var tierAtt = tierAttribute[j];
			var attName = tierAtt.*::tierAttributeName.text();
			var attVal = tierAtt.*::tierAttributevalue.text();
				
			if(attVal.length() == 0) {
				attVal = tierAtt.*::tierAttributevalue.*;
			}
			// 			log.info("Tier" + stringify(attVal));
			// 			log.info("----------------------------------------------------------------------------");
			tier_attribute.attributeName = attName;
			tier_attribute.attributeValue = attVal;
			tier_attributes[j] = tier_attribute;
		}
		tier.name = tierName;
		tier.displayName = tierDisplayName;
		tier.attributes = tier_attributes;
		tiersObject.push(tier);
	}
	applicationDetails.tiers = tiersObject;
	return applicationDetails;
}

function getSubscriptionDetails(taskId){
	var subscriptionDetails;
	try {
		var site = require("/site/conf/site.json");
		var prefixEndpoint = site.workflows.subscriptionWorkFlowServerURL;
		var endpoint=prefixEndpoint+"HumanTaskClientAPIAdmin/";

		subscriptionDetails = getTaskDetails(taskId);
		return parseSubscriptionDetailsResponse(subscriptionDetails, endpoint, taskId);
	} catch (e) {
		log.error(e.toString());
		session.put("showLogin", "true");
		return null;
	}
};

function parseSubscriptionDetailsResponse(response, endpoint, taskId){
	var subscriptionDetails = new Object();
	var tiersObject=[];
	var tiers;
	var task_id = taskId;
	subscriptionDetails.taskId = task_id;

	var SubscriptionApprovalData = new XML((response.*::taskData).toString());
	
	var appId = SubscriptionApprovalData.*::applicationId.text();
	var apiId = SubscriptionApprovalData.*::apiID.text();
	var operatorId = SubscriptionApprovalData.*::operatorID.text();

	var applicationName = SubscriptionApprovalData.*::applicationName.text();
	var applicationDescription = SubscriptionApprovalData.*::applicationDescription.text();
	var subscriber = SubscriptionApprovalData.*::subscriber.text();
	var apiName = SubscriptionApprovalData.*::apiName.text();
	var apiVersion = SubscriptionApprovalData.*::apiVersion.text();
	subscriptionDetails.applicationName = applicationName;
	subscriptionDetails.applicationDescription = applicationDescription;
	subscriptionDetails.subscriber = subscriber;
	subscriptionDetails.apiNameVersion = apiName + " - " + apiVersion;
	
	subscriptionDetails.appId = appId;
	subscriptionDetails.apiId = apiId;
	subscriptionDetails.operatorId = operatorId;
	subscriptionDetails.apiName = apiName;

	var tiers = SubscriptionApprovalData.*::tiers.*::tier;

	for(var i = 0; i < tiers.length(); i++) {
		var tier = {
		};
		var entry = tiers[i];
		var tierName = entry.*::tierName.text();
		var tierDisplayName = entry.*::tierDisplayName.text();
		var tierAttributes = entry.*::tierAttributes;
		var tierAttribute = tierAttributes.*::tierAttribute;

		var tier_attributes = [];
		for (j = 0; j < tierAttribute.length(); j++) {
			var tier_attribute = {
			};
			var tierAtt = tierAttribute[j];
			var attName = tierAtt.*::tierAttributeName.text();
			var attVal = tierAtt.*::tierAttributevalue.text();

			if(attVal.length() == 0) {
				attVal = tierAtt.*::tierAttributevalue.*;
			}

			tier_attribute.attributeName = attName;
			tier_attribute.attributeValue = attVal;
			tier_attributes[j] = tier_attribute;
		}
		tier.name = tierName;
		tier.displayName = tierDisplayName;
		tier.attributes = tier_attributes;
		tiersObject.push(tier);
	}
	subscriptionDetails.tiers = tiersObject;
	return subscriptionDetails;
}

function getAllTiers(){
	var log = new Log();
	//log.info("*************************Get All Tiers from Host Object***************************");

	var workflow = jagg.module("manager").getWorkflowHostObject();
	var tiers = [];
	try {
		tiers = workflow.getTierDetails();
// 		log.info("Tier List: " + stringify(tiers));
		return {error:false, data : tiers};

	} catch (e) {
		log.error(e.message);
		return { error:true,message:e.message};
	}
}

function getRatesList(apiName, opName){
	var workflow, result;
		workflow = jagg.module("manager").getWorkflowHostObject();
		
		try {
			result = workflow.getSubscriptionRatesForOperator(apiName, opName);
			if (result == null) {
				return {error:true};
			} else {
				return {error:false,result:result};
			}
		} catch (e) {
			log.error(e.message);
			return { error:e,result:null};
		}
}
%>