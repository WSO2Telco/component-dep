<%
include("/jagg/jagg.jag");
var log=new Log();
var ws = require("ws");

var completeTask = function (taskId,taskType,taskName,status,description,endpoint,username,currentDate,selectedTier) {



/*var version = new ws.WSRequest();
var options = new Array();
options.useSOAP = 1.2;
options.action = "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/complete";
var cookie=session.get("workflowCookie");

options["HTTPHeaders"] = [
                              { name : "Cookie", value :cookie },
                        ];


var refId=getRefId(taskId,endpoint,taskType);
var taskPayload;

if(taskType=="subscription"){
taskPayload="&lt;sch:SubscriptionApprovalResponse xmlns:sch=&quot;http://workflow.subscription.apimgt.carbon.wso2.org&quot;&gt;"+
            "&lt;sch:status&gt;"+status+"&lt;/sch:status&gt;"+
            "&lt;sch:workflowExternalRef&gt;"+refId+"&lt;/sch:workflowExternalRef&gt;"+
            "&lt;sch:description&gt;"+description+"&lt;/sch:description&gt;" +
            "&lt;sch:completedByUser&gt;"+username+"&lt;/sch:completedByUser&gt;" +
			"&lt;sch:completedOn&gt;"+currentDate+"&lt;/sch:completedOn&gt;" +
			"&lt;sch:selectedTier&gt;"+selectedTier+"&lt;/sch:selectedTier&gt;" +
            "&lt;/sch:SubscriptionApprovalResponse&gt;";

} else if(taskType=="user-signup"){
taskPayload="&lt;sch:UserApprovalResponse xmlns:sch=&quot;http://workflow.registeruser.apimgt.carbon.wso2.org&quot;&gt;"+
            "&lt;sch:status&gt;"+status+"&lt;/sch:status&gt;"+
            "&lt;sch:workflowExternalRef&gt;"+refId+"&lt;/sch:workflowExternalRef&gt;"+
            "&lt;sch:description&gt;"+description+"&lt;/sch:description&gt;" +
            "&lt;/sch:UserApprovalResponse&gt;";

} else if(taskType=="application"){
taskPayload="&lt;sch:ApplicationApprovalResponse xmlns:sch=&quot;http://workflow.application.apimgt.carbon.wso2.org&quot;&gt;"+
            "&lt;sch:status&gt;"+status+"&lt;/sch:status&gt;"+
            "&lt;sch:workflowExternalRef&gt;"+refId+"&lt;/sch:workflowExternalRef&gt;"+
            "&lt;sch:description&gt;"+description+"&lt;/sch:description&gt;" +
            "&lt;sch:completedByUser&gt;"+username+"&lt;/sch:completedByUser&gt;" +
            "&lt;sch:completedOn&gt;"+currentDate+"&lt;/sch:completedOn&gt;" +
            "&lt;sch:selectedTier&gt;"+selectedTier+"&lt;/sch:selectedTier&gt;" +
            "&lt;/sch:ApplicationApprovalResponse&gt;";

} else if(taskType=="appRegistration"){
taskPayload="&lt;sch:ApplicationRegistrationResponse xmlns:sch=&quot;http://workflow.application.apimgt.carbon.wso2.org&quot;&gt;"+
            "&lt;sch:status&gt;"+status+"&lt;/sch:status&gt;"+
            "&lt;sch:workflowExternalRef&gt;"+refId+"&lt;/sch:workflowExternalRef&gt;"+
            "&lt;sch:description&gt;"+description+"&lt;/sch:description&gt;" +
            "&lt;/sch:ApplicationRegistrationResponse&gt;";

}

var payload = '<ns:complete xmlns:ns="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803">'+
              '<ns:identifier>'+taskId+'</ns:identifier><ns:taskData>'+String(taskPayload)+'</ns:taskData></ns:complete>';
var result;
 */


try {
    var headers = {"Authorization":"Basic " + session.get("auth"),
               "Content-Type": "application/json"};
    var site = require("/site/conf/site.json");
    var businessProcessEngineUrl = site.workflows.businessProcessEngineBaseUrl;
    var adminApprovalLevel = taskName=='Hub Admin Approval' ? "hubAdminApproval" : "operatorAdminApproval"
	var body = {
                "action" : "complete",
                "variables" : [
                    {
                      "name" : adminApprovalLevel,
                      "value" : status,
                      "type" : "string"
                    },
                    {
                      "name" : selectedTier,
                      "value" : selectedTier,
                      "type" : "string"
                    }
                ]};
	var result = post(businessProcessEngineUrl + "runtime/tasks/"+taskId,
	JSON.stringify(body),
	headers, "json").data;
return {
error:false
}

} catch (e) {
log.error("1"+e.toString());
return {
error:true
}
}
};

var getRefId = function (taskId,endpoint,taskType) {
var refId;
try {
/*var version = new ws.WSRequest();
var options = new Array();
options.useSOAP = 1.2;
options.action = "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getInput";
var cookie=session.get("workflowCookie");

options["HTTPHeaders"] = [
                              { name : "Cookie", value :cookie },
                        ];


var payload = '<ns:getInput xmlns:ns="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803"><ns:identifier>'+taskId+'</ns:identifier></ns:getInput>';
var result;

try {
version.open(options,endpoint, false);
version.send(payload);
result = version.responseE4X;
var start=result.toString().indexOf("&lt;workflowExternalRef");
var end= result.toString().indexOf("&lt;/workflowExternalRef");
var splitVal="";
var namespace="";
if(taskType=="subscription"){
splitVal="&gt;"
} else if(taskType=="user-signup"){
namespace="http://workflow.registeruser.apimgt.carbon.wso2.org";
splitVal='\"'+namespace+'\"&gt;';
} else if(taskType=="application"){
splitVal="&gt;";
} else if(taskType=="appRegistration"){
splitVal="&gt;";
}

refId=result.toString().substring(start,end).split(splitVal)[1] ;*/
var site = require("/site/conf/site.json");
    		var businessProcessEngineUrl = site.workflows.businessProcessEngineBaseUrl;
            var headers = {"Authorization":"Basic " + session.get("auth")};
var workflowRefVariable = get(businessProcessEngineUrl + "runtime/tasks/" +
                    taskId + "/variables/workflowRefId",null, headers,"json" ).data;

refId = workflowRefVariable.value;
log.info("Reference Is" + refId);
return refId;

} catch (e) {
log.error("2"+e.toString());
return 0;
}
};

// Set tier for the specified subscription.
var setSubscriptionTier = function (taskId, taskType, tierId, endpoint) {
	
	var refId = getRefId(taskId, endpoint, taskType);

	var workflow, result;
	workflow = jagg.module("manager").getWorkflowHostObject();
	
	try {
		result = workflow.setSubscriptionTier(refId,tierId);
		if (log.isDebugEnabled()) {
			log.debug("setSubscriptionTier for SUBSCRIPTION_ID : " + refId);
		}
				
		if (result == null) {
			return {error:true};
		} else {
			return {error:false,result:result};
		}
	} catch (e) {
		log.error("3"+e.message);
		return { error:e,result:null};
	}
};

//Set subscription charge rate card. Added by Hiranya on 2014-11-11
var setSubscriptionChargeRate = function (appId, apiId, opName, rateNameNB,operationId) {
	
	var workflow, result;
	workflow = jagg.module("manager").getWorkflowHostObject();
	
	try {
		result = workflow.setSubscriptionChargeRate(appId, apiId, opName, rateNameNB, operationId);
		if (result == null) {
			return {error:true};
		} else {
			return {error:false,result:result};
		}
	} catch (e) {
		log.error("4"+e.message);
		return { error:e,result:null};
	}
};

var setSubscriptionChargeRateNB = function (appId, apiId) {
	
	var workflow, result;
	workflow = jagg.module("manager").getWorkflowHostObject();
	
	try {
		result = workflow.setSubscriptionChargeRateNB(appId, apiId);
		if (result == null) {
			return {error:true};
		} else {
			return {error:false,result:result};
		}
	} catch (e) {
		log.error("5"+e.message);
		return { error:e,result:null};
	}
};
// Set tier for the specified application.
var setApplicationTier = function (taskId, taskType, tierId, endpoint) {
	
	var refId = getRefId(taskId, endpoint, taskType);

	var workflow, result;
	workflow = jagg.module("manager").getWorkflowHostObject();
	    log.info("refId"+refId+"tierId"+tierId);
	   
	try {
		log.info("2refId"+refId+"tierId"+tierId);

		result = workflow.setApplicationTier(refId,tierId);
		log.info("refId"+refId+"tierId"+tierId);
		if (log.isDebugEnabled()) {tierId
			log.debug("setApplicationTier for APPLICATION_ID : " + refId);
		}
				
		if (result == null) {
			return {error:true};
		} else {
			return {error:false,result:result};
		}
	} catch (e) {
		log.error("6"+e.message);
		return { error:e,result:null};
	}
};


%>
