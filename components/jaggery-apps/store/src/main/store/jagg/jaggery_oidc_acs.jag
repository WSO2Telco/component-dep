<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
(function () {
    include("jagg.jag");
    var i18n = require("i18n");
    var localeResourcesBasePath = "/site/conf/locales/jaggery/";
    i18n.init(request, localeResourcesBasePath);

    var site = require("/site/conf/site.json");
    var log = new Log();

    var authorizationCode = request.getParameter("code");
    var state = request.getParameter("state");

    // check for state, if it doesn't match we bail early
    if (session.get("STATE") != state) {
        log.error("STATE does not match. Hence redirecting to error page. Sign-in fails.");
        response.sendRedirect("../site/pages/error-pages/401.html");

        return;
    }

    // create a sso relying party js object
    var security = require("oidc");
    var oidcRelyingParty = new security.OIDCRelyingParty(site.oidcConfiguration.issuer);


    var sessionId = session.getId();
    var requestedURI = session.get("STORE_REDIRECT_URI");

    if (requestedURI == null) {
        log.error("requestedURI value is invalid.");
        requestedURI = site.context;
    }

    // obtain oidc token response to validate the signature and to obtain group ids
    var oidcTokenReponse = oidcRelyingParty.getIdTokenResponse(authorizationCode);
    // Check OIDC signature valid and set session as a authenticated if success
    var isSignatureValid = oidcRelyingParty.validateOIDCSignature(oidcTokenReponse, session.get("NONCE"), sessionId);

    if (!Boolean(isSignatureValid)) {
        log.error("OIDC signature is verification failed.");
        response.sendRedirect("../site/pages/error-pages/401.html");
        return;
    }


    session.put("showLogin", "false");

    var api = jagg.module("api");
    var isUserPermitted = api.hasUserPermissions(oidcRelyingParty.getLoggedInUser(sessionId));

    var hasPublisherAccess = api.hasPublisherAccess(oidcRelyingParty.getLoggedInUser(sessionId));
    var oidcUser = oidcRelyingParty.getLoggedInUser(sessionId);

    
var manager = jagg.module("manager");
    var  store = manager.getAPIStoreObj();
    var groupIdArray = store.getGroupIds(oidcTokenReponse);
    //Store and empty string instead of null if no group Id is found. This is done so that when checking for a string array
    //the null value returned would not cause any issue.
    var groupId="";
    if(groupIdArray != null && groupIdArray.length != 0){
        var length = groupIdArray.length;
        for (i = 0; i < length; i++) {
            if (groupIdArray[i] != null) {
                if (i == (length - 1)) {
                    groupId = groupId + groupIdArray[i].toString();
                } else {
                    groupId = groupId + groupIdArray[i].toString() + ",";
                }
            }
        }
    }

    if(log.isDebugEnabled()){
        log.debug("Setting Group ID :-" + groupId);
    }
    if(groupId == null || groupId == "null"){
        //   Set group Id to empty string to avoid null value being passed to backend.
        groupId="";
    }
    session.put("groupId", groupId)

    //First check whether user is having sufficent permissions [create/publish]
    if (!isUserPermitted.permitted) {
        log.warn("User not permitted");
        oidcRelyingParty.invalidateSessionBySessionId(sessionId);

        %>
        <script src="../site/themes/wso2/libs/jquery_1.11.0/jquery-1.11.3.min.js"></script>
        <script src="../site/themes/wso2/libs/bootstrap_3.3.5/js/bootstrap.js"></script>
        <link rel="stylesheet" href="../site/themes/wso2/libs/bootstrap_3.3.5/css/bootstrap.css">
        <style>
        </style>

        <script>

        $(document).ready(function(){
             $('#infoModal').modal({
                backdrop: 'static',
                keyboard: false
            })
        });

        function redirectFunction() {
            window.location = <%=requestedURI%>;
        }
        </script>

        <div class="modal fade" id="infoModal" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title"><%=i18n.localize("403: User Not Permitted")%></h4>
                    </div>
                    <div class="modal-body">
                        <p><%=i18n.localize("User is not permitted to login to store.")%></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="redirectFunction()">
                        <%=i18n.localize("Return to public store")%></button>
                    </div>
                </div>
            </div>
        </div>

        <%


    } else {
        jagg.setUser({username: oidcUser, cookie: null, hasPublisherAccess: hasPublisherAccess});
        session.put("LOGGED_IN_USER", oidcUser);
        var username = oidcRelyingParty.getLoggedInUser(sessionId);
        var manager = jagg.module("manager");
        var store = manager.getAPIStoreObj();
        var subscriber = store.getSubscriber(username);
        if (!subscriber) {
            store.addSubscriber(username, groupId);
            subscriber = store.getSubscriber(username);
        }
        session.put("hasPublisherAccess", hasPublisherAccess);
        response.sendRedirect(requestedURI);
    }

}());
%>
</body>
</html>


