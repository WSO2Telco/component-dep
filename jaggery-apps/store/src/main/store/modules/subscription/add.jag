<%
var addSubscription = function (api, tier, applicationId, username) {
    var status = Packages.org.wso2.carbon.apimgt.api.model.SubscriptionResponse,
            log = new Log(),
            store = jagg.module("manager").getAPIStoreObj();

    try {
        var groupingId = session.get("groupId");

var subscriptionResponse = Packages.org.wso2.carbon.apimgt.api.model.SubscriptionResponse;
        subscriptionResponse = store.addSubscription(api.provider, api.name, api.version, tier, applicationId,  username);
        var workflowResponse = Packages.org.wso2.carbon.apimgt.api.WorkflowResponse;
        workflowResponse = subscriptionResponse.getWorkflowResponse();
        var jsonSubsResponse = {};
        jsonSubsResponse.subscriptionStatus = subscriptionResponse.subscriptionStatus;
        jsonSubsResponse.subscriptionUUID = subscriptionResponse.subscriptionUUID;
        jsonSubsResponse.workflowResponse = {};
        jsonSubsResponse.workflowResponse.jsonPayload = subscriptionResponse.getWorkflowResponse().getJSONPayload();

        if (log.isDebugEnabled()) {
            log.debug("addAPISubscription");
        }
        return {
            error:false,
            status:jsonSubsResponse
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            status:false,
            message:e.message
        };
    }
};

var addAPISubscription = function (api, tier, applicationName, username) {
    var status,
            log = new Log(),
            store = jagg.module("manager").getAPIStoreObj();

    try {
        var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var applicationId = APIUtil.getApplicationId(applicationName,username);
        
        var subscriptionResponse = Packages.org.wso2.carbon.apimgt.api.model.SubscriptionResponse;
        subscriptionResponse = store.addSubscription(api.provider, api.name, api.version, tier, applicationId,  username);
        var workflowResponse = Packages.org.wso2.carbon.apimgt.api.WorkflowResponse;
        workflowResponse = subscriptionResponse.getWorkflowResponse();
        var jsonSubsResponse = {};
        jsonSubsResponse.subscriptionStatus = subscriptionResponse.subscriptionStatus;
        jsonSubsResponse.subscriptionUUID = subscriptionResponse.subscriptionUUID;
        jsonSubsResponse.workflowResponse = {};
        jsonSubsResponse.workflowResponse.jsonPayload = subscriptionResponse.getWorkflowResponse().getJSONPayload();

        if (log.isDebugEnabled()) {
            log.debug("addAPISubscription");
        }
        return {
            error:false,
            status:jsonSubsResponse
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            status:false,
            message:e.message
        };
    }
};
%>
